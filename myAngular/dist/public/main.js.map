{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/http.service.ts","webpack:///./src/app/task/task.component.css","webpack:///./src/app/task/task.component.html","webpack:///./src/app/task/task.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<!--The content below is only a placeholder and can be replaced.-->\\n<div style=\\\"text-align:center\\\">\\n  <h1>\\n    Welcome to {{ title }}!\\n\\n      <h1>hjkjhgThese are your Tasks:</h1>\\n\\n      <!-- {{tasks.completed}} -->\\n      <!-- if you want to show all tasks by clicking the button -->\\n      <button (click)=\\\"onButtonClick()\\\">Click to show all Tasks!</button>\\n\\n      <div *ngFor=\\\"let task of tasks\\\">Title: {{task.title}}\\n\\n        <button (click)=\\\"onButShowCompl(task)\\\">Show</button>\\n        <button (click)=\\\"onDelete(task._id)\\\">Delete Task</button>\\n        <button (click)=\\\"onEdit(task)\\\">Edit Task</button>\\n\\n        <button (click)=\\\"onButShowCompl(task)\\\">Show Description</button>\\n\\n      </div>\\n\\n      <!-- show a specific task when you click on it -->\\n      <div>\\n        <p *ngIf=\\\"specTask\\\"> Title: {{specTask.title}} <br>\\n          Description: {{specTask.description}} <br>\\n          Completed: {{specTask.completed}}</p>\\n        <!-- {{specTask}} -->\\n      </div>\\n\\n      <div *ngIf=\\\"tasks.length > 0\\\" >\\n      <h3>Create a new Task</h3>\\n\\n      <form (submit)=\\\"onSubmit()\\\">\\n         <!-- <p>{{ newTask | json }}</p> -->\\n\\n         <input type=\\\"text\\\" name=\\\"newTask.title\\\" [(ngModel)]=\\\"newTask.title\\\">\\n         <input type=\\\"text\\\" name=\\\"newTask.description\\\" [(ngModel)]=\\\"newTask.description\\\">\\n         <input type=\\\"text\\\" name=\\\"newTask.completed\\\" [(ngModel)]=\\\"newTask.completed\\\">\\n         <input type=\\\"submit\\\" value=\\\"Create Task\\\">\\n         <!-- <button (click)=\\\"onSubmit()\\\">Create a new Task</button> -->\\n       </form>\\n      </div>\\n\\n<!-- edit a task -->\\n    <div *ngIf=\\\"editTask\\\" class=\\\"update\\\">\\n          <h3>Edit {{editTask.title }}</h3>\\n    \\n          <!-- {{editTask | json}} -->\\n          <form (submit)=\\\"updateTask(editTask)\\\">\\n    \\n             <input type=\\\"text\\\" name=\\\"editTask.title\\\" placeholder={{editTask.title}} [(ngModel)]=\\\"editTask.title\\\">\\n             <input type=\\\"text\\\" name=\\\"editTask.description\\\" placeholder={{editTask.description}} [(ngModel)]=\\\"editTask.description\\\">\\n             <input type=\\\"text\\\" name=\\\"editTask.completed\\\" placeholder={{editTask.completed}} [(ngModel)]=\\\"editTask.completed\\\">\\n             <input type=\\\"submit\\\" value=\\\"Update Task\\\">\\n           </form>\\n    </div>\\n  \\n    <app-task *ngIf=\\\"selectedTask\\\" [task]=\\\"selectedTask\\\"></app-task>\\n\\n\"","import { HttpService } from './http.service';\n\nimport { Component, OnInit } from '@angular/core';\n\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\n\n// export class AppComponent implements OnInit //0\nexport class AppComponent implements OnInit {\n  title = \"Restful User CRUD\";\n  tasks = [];\n  specTask = null;\n  newTask: any;\n  editTask: any;\n  showTask = false;\n  selectedTask = null;\n\n  constructor(private _httpService: HttpService) {\n    console.log(\"Component is Running\");\n  }\n\n  // ngOnInit will run when the component is initialized, after the constructor method.\n  ngOnInit() {\n    this.newTask = {title: \"\", description: \"\", completed: false};\n    this.editTask = {title: \"\", description: \"\", completed: false};\n    \n  }\n\n  getTasksFromService() {\n    let observable = this._httpService.getTasks();\n    observable.subscribe(res => {\n      console.log(\"Got our tasks---\", res)\n      this.tasks = res['task'];\n    });\n  }\n\n  // shows all the tasks when you click on a button\n  onButtonClick() {\n    const observable = this._httpService.getTasks();\n    observable.subscribe(res =>{\n      this.getTasksFromService();\n      console.log(\"YEIHA 1\");\n    });\n    console.log(\"Button is clicked---------------------------------\");\n  }\n\n  // show specific task\n  onButShowCompl(task): void {\n    console.log(\"Is it showing?\", task);\n    this.specTask = task; //That's the button for showing a specific Task\n    this.selectedTask = task; //That's the functionallity to show a specific Task as a nested component\n    console.log(this.specTask);\n    }\n  \n// delete a task\n  onDelete(id){\n    console.log(\"Delete button pushed, \");\n    let tempObservable = this._httpService.deleteTask(id);\n    tempObservable.subscribe((res) => {\n      console.log(\"Data deleted\", res);\n    });\n  }\n\n  // for the button click to edit a task\n  onEdit(task){\n    this.editTask = task;\n  }\n\n  // update task\n  updateTask(task){\n    console.log(\"I'm trying to edit you - Edit button clicked\");\n    let updateObservable = this._httpService.updateTask(task);\n    updateObservable.subscribe((updatedTask) => {\n      console.log(\"Your task is updated\", updatedTask);\n    })\n    this.getTasksFromService();\n  }\n\n  // create a new task\n  onSubmit(){\n    console.log(\"lets create a new one in your components.ts\");\n    let newObservable = this._httpService.newTask(this.newTask);\n    newObservable.subscribe((res) => {\n      console.log(\"Create new task in your components.ts ---------- \", );\n    })\n    this.newTask = { title: \"\", description: \"\", completed: false};\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { HttpService } from './http.service';\nimport { HttpClientModule } from '@angular/common/http';\nimport { FormsModule } from '@angular/forms';\nimport { TaskComponent } from './task/task.component';\n\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    TaskComponent\n  ],\n  imports: [\n    BrowserModule,\n    HttpClientModule,\n    FormsModule\n  ],\n  providers: [HttpService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Injectable } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class HttpService {\n\n  // call the created function in the constructor with this\n  constructor(private _http: HttpClient) {\n    // this.getTask();\n    console.log(\"Service is Running\");\n  }\n\n  // get all the Tasks\n  getTasks() {\n    // after get needs to match our routes in the routes.js file\n    return this._http.get('/task');\n\n  }\n\n  // delete a Task by ID\n  showSpecTask(id: string) {\n    return this._http.get('/task/:id');\n  }\n\n  getDataByClick(){\n    return this._http.get('/task');\n  }\n\n  // create a new Task\n  newTask(newtask: any) {\n    console.log(\"I'm in your service and create a new task\", newtask);\n    return this._http.post('/task', newtask);\n  }\n\n  // update a Task\n  updateTask(task: any) {\n    console.log(\"SERVICE\", task)\n    return this._http.put('/task/' + task._id, task);\n  }\n\n  // delete a Task\n  deleteTask(id: string) {\n    console.log(\"helooooooooooooooo delete task\");\n    return this._http.delete('/task/' + id);\n  }\n}\n\n\n","module.exports = \"\"","module.exports = \"<!-- <p>\\n  task works!\\n</p> -->\\n\\n<h3>Title: {{ task.title }}</h3><br>\\n<h3>Description: {{ task.description }}</h3>\\n\\n<!-- {{ task | json }} -->\"","import { Component, OnInit, Input } from '@angular/core';\n\n@Component({\n  selector: 'app-task',\n  templateUrl: './task.component.html',\n  styleUrls: ['./task.component.css']\n})\nexport class TaskComponent implements OnInit {\n  @Input() task; //That's the folder name\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}